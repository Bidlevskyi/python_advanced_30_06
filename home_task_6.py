'''
Написать свой cache декоратор c максимальным размером кеша и его очисткой при необходимости.
Декоратор должен перехватывать аргументы оборачиваемой функции
Декоратор должен иметь хранилище, где будут сохраняться все перехваченные аргументы и результаты выполнения декорируемой функции
Декоратор должен проверять наличие перехваченных аргументов в хранилище. Если декорируемая функция уже вызывалась с такими аргументами, она не будет вызываться снова, вместо этого декоратор вернет сохраненное значение.
Декоратор должен принимать один аргумент - максимальный размер хранилища.
Если хранилище заполнено, нужно удалить 1 любой элемент, чтобы освободить место под новый.
'''
Cache = {} 

def do_cache(maxsize=3):
    def outer(func):
        def wrapper(*args):        
            global Cache
            nonlocal maxsize
            len_Cache = len(Cache.keys())
            if maxsize == len_Cache: 
                del_keys = list(Cache.keys())[0]
                del Cache[del_keys]
            for i in Cache.keys():
               if Cache[i] == (args[0], args[1]):
                   return Cache[i]
            value = func(*args)
            Cache[value] = (args[0], args[1])
            return value
        return wrapper
    return outer





@do_cache(3)
def get_value(a, b):
    return a ** b


